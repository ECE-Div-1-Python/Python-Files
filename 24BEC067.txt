# 1. Add two numbers
a = 10
b = 15
print("Addition:", a + b)

# 2. Subtract two numbers
a = 25
b = 5
print("Subtraction:", a - b)

# 3. Multiply two numbers
a = 7
b = 6
print("Multiplication:", a * b)

# 4. Divide two numbers
a = 20
b = 4
print("Division:", a / b)

# 5. Add, multiply, subtract and divide two numbers
a = 18
b = 3
print("Add:", a + b)
print("Subtract:", a - b)
print("Multiply:", a * b)
print("Divide:", a / b)

# 6. Convert hours into minutes
hours = 3
minutes = hours * 60
print("Minutes:", minutes)

# 7. Convert minutes into hours
minutes = 150
hours = minutes / 60
print("Hours:", hours)

# 8. Convert dollars into rupees (1$ = 48 Rs)
dollars = 25
rupees = dollars * 48
print("Rupees:", rupees)

# 9. Convert rupees into dollars (1$ = 48 Rs)
rupees = 960
dollars = rupees / 48
print("Dollars:", dollars)

# 10. Convert dollars to pounds (1$ = 48 Rs, 1 pound = 70 Rs)
dollars = 100
rupees = dollars * 48
pounds = rupees / 70
print("Pounds:", pounds)

# 11. Convert grams into kg
grams = 2500
kg = grams / 1000
print("Kg:", kg)

# 12. Convert kgs into grams
kg = 3
grams = kg * 1000
print("Grams:", grams)

# 13. Convert bytes into KB, MB and GB
bytes_val = 10485760  # 10 MB in bytes
print("KB:", bytes_val / 1024)
print("MB:", bytes_val / (1024 ** 2))
print("GB:", bytes_val / (1024 ** 3))

# 14. Convert Celsius into Fahrenheit
c = 30
f = (9/5 * c) + 32
print("Fahrenheit:", f)

# 15. Convert Fahrenheit into Celsius
f = 98
c = 5/9 * (f - 32)
print("Celsius:", c)

# 16. Calculate interest I = PRN / 100
P = 2000
R = 5
N = 3
I = (P * R * N) / 100
print("Interest:", I)

# 17. Calculate area and perimeter of a square
L = 6
area = L ** 2
perimeter = 4 * L
print("Area of square:", area)
print("Perimeter of square:", perimeter)

# 18. Calculate area and perimeter of a rectangle
L = 10
B = 4
area = L * B
perimeter = 2 * (L + B)
print("Area of rectangle:", area)
print("Perimeter of rectangle:", perimeter)

# 19. Calculate area of a circle
R = 5
area = (22 / 7) * R * R
print("Area of circle:", area)

# 20. Calculate area of a triangle
H = 8
L = 10
area = (H * L) / 2
print("Area of triangle:", area)

# 21. Calculate net salary
gross_salary = 30000
allowance = 0.10 * gross_salary
deduction = 0.03 * gross_salary
net_salary = gross_salary + allowance - deduction
print("Net Salary:", net_salary)

# 22. Calculate net sales after 10% discount
gross_sales = 50000
discount = 0.10 * gross_sales
net_sales = gross_sales - discount
print("Net Sales:", net_sales)

# 23. Calculate average of three subjects
sub1 = 85
sub2 = 90
sub3 = 80
total = sub1 + sub2 + sub3
average = total / 3
print("Total Marks:", total)
print("Average Marks:", average)

# 24. Swap two values
a = 7
b = 14
print("Before swap: a =", a, "b =", b)
a, b = b, a
print("After swap: a =", a, "b =", b)


Lab 2(a)
1.# AND Operator
a = 40
b = 30

x = (75 and a >= 20 and b < 60 and 35)
# 75 is True, a >= 20 is True, b < 60 is True, 35 is True
# All are True => returns last value => x = 35

y = -30 and a >= 20 and b < 15 and 35
# -30 is True, a >= 20 is True, b < 15 is False
# Stops at False => y = False

z = -30 and a >= 20 and 0 and 35
# -30 is True, a >= 20 is True, 0 is False
# Stops at False => z = 0

print("AND Results:")
print("x =", x)  # 35
print("y =", y)  # False
print("z =", z)  # 0

2.# OR Operator
a = 40
b = 30

x = 75 or a >= 20 and b < 60 and 35
# 75 is True => x = 75

x = 75 or a >= 20 or 60
# 75 is True => x = 75

y = a >= 20 or 75 or 60
# a >= 20 is True => y = True

z = a < 20 or 0 or 35
# a < 20 is False, 0 is False, 35 is True => z = 35

print("\nOR Results:")
print("x =", x)  # 75
print("y =", y)  # True
print("z =", z)  # 35

3.# NOT Operator
a = 10
b = 20

result = not (a <= b)
# a <= b is True => not True => False

print("\nNOT Result:")
print("result =", result)  # False


Lab2(b)
# 1. Largest and smallest of two numbers
a = int(input("Enter first number: "))
b = int(input("Enter second number: "))
if a > b:
    print("Largest:", a)
    print("Smallest:", b)
else:
    print("Largest:", b)
    print("Smallest:", a)

# 2. Largest and smallest of three numbers
a = int(input("Enter first number: "))
b = int(input("Enter second number: "))
c = int(input("Enter third number: "))
if a > b and a > c:
    print("Largest:", a)
elif b > c:
    print("Largest:", b)
else:
    print("Largest:", c)
if a < b and a < c:
    print("Smallest:", a)
elif b < c:
    print("Smallest:", b)
else:
    print("Smallest:", c)

# 3. Odd or even
n = int(input("Enter a number: "))
if n % 2 == 0:
    print("Even")
else:
    print("Odd")

# 4. Divisible by 10
n = int(input("Enter a number: "))
if n % 10 == 0:
    print("Divisible by 10")
else:
    print("Not divisible by 10")

# 5. Minor or Major
age = int(input("Enter age: "))
if age < 18:
    print("Minor")
else:
    print("Major")

# 6. Number of digits
n = int(input("Enter a number: "))
n = abs(n)
count = 0
if n == 0:
    count = 1
else:
    while n > 0:
        count += 1
        n //= 10
print("Number of digits:", count)

# 7. Leap year
year = int(input("Enter a year: "))
if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):
    print("Leap Year")
else:
    print("Not a Leap Year")

# 8. Triangle validity
a1 = int(input("Enter angle 1: "))
a2 = int(input("Enter angle 2: "))
a3 = int(input("Enter angle 3: "))
if a1 + a2 + a3 == 180:
    print("Valid Triangle")
else:
    print("Invalid Triangle")

# 9. Absolute value
n = int(input("Enter a number: "))
if n < 0:
    print("Absolute value:", -n)
else:
    print("Absolute value:", n)

# 10. Area vs Perimeter of rectangle
l = int(input("Enter length: "))
b = int(input("Enter breadth: "))
area = l * b
peri = 2 * (l + b)
if area > peri:
    print("Area is greater")
else:
    print("Perimeter is greater")

# 11. Collinear points
x1 = int(input("x1: "))
y1 = int(input("y1: "))
x2 = int(input("x2: "))
y2 = int(input("y2: "))
x3 = int(input("x3: "))
y3 = int(input("y3: "))
if (y2 - y1)*(x3 - x1) == (y3 - y1)*(x2 - x1):
    print("Points are collinear")
else:
    print("Points are not collinear")

# 12. Point inside/on/outside a circle
import math
x = int(input("Enter x: "))
y = int(input("Enter y: "))
cx = int(input("Enter center x: "))
cy = int(input("Enter center y: "))
r = int(input("Enter radius: "))
d = math.sqrt((x - cx)**2 + (y - cy)**2)
if d < r:
    print("Inside the circle")
elif d == r:
    print("On the circle")
else:
    print("Outside the circle")

# 13. Number to word (0 to 19)
n = int(input("Enter number (0-19): "))
words = ["zero", "one", "two", "three", "four", "five", "six", "seven",
         "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen",
         "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]
if 0 <= n <= 19:
    print(words[n])
else:
    print("Out of range")

# 14. Total, average, result and grade
m1 = int(input("Enter marks of subject 1: "))
m2 = int(input("Enter marks of subject 2: "))
m3 = int(input("Enter marks of subject 3: "))
total = m1 + m2 + m3
avg = total / 3
print("Total:", total)
print("Average:", avg)
if m1 <= 39 or m2 <= 39 or m3 <= 39:
    print("Result: Fail")
else:
    print("Result: Pass")
for marks in [m1, m2, m3]:
    if marks == 0:
        print("Grade: NA")
    elif marks <= 39:
        print("Grade: F")
    elif marks <= 44:
        print("Grade: P")
    elif marks <= 49:
        print("Grade: C")
    elif marks <= 54:
        print("Grade: B")
    elif marks <= 59:
        print("Grade: B+")
    elif marks <= 69:
        print("Grade: A")
    elif marks <= 79:
        print("Grade: A+")
    elif marks <= 100:
        print("Grade: O")

#3.1
def countvowels():
    str = input("ENTER THE STRING: ")
    print(str.count("a")+str.count("e")+str.count("i")+str.count("o")+str.count("u")+str.count("A")+str.count("E")+str.count("I")+str.count("O")+str.count("U"))
    c = 0
    for ch in str:
        if ch in "AEIOUaeiou":
            c += 1
        print(c)
countvowels()


#3.2(a)
def lower(str):
    newstr = ''
    for ch in str:
        if'A'<=ch<='Z':
          newstr += chr(ord(ch)+32)
        else:
              newstr += ch
    print(newstr)
s = input("ENTER THE STRING: ")
lower(s)


#3.2(b)
def upper(str):
    newstr = ''
    for ch in str:
        if'a'<=ch<='z':
          newstr += chr(ord(ch)-32)
        else:
              newstr += ch
    print(newstr)
s = input("ENTER THE STRING: ")
upper(s)


#3.2(c)
def toggle(str):
    newstr = ''
    for ch in str:
        if'A'<=ch<='Z':
          newstr += chr(ord(ch)+32)
        elif'a'<=ch<='z':
          newstr += chr(ord(ch)-32)
        else:
              newstr += ch
    print(newstr)
s = input("ENTER THE STRING: ")
toggle(s)


#3.3
def check():
    s1 = input("ENTER A STRING: ")
    s2 = input("ENTER ANOTHER STRING ")
    print(s2 in s1)
check()


#3.4
def remove():
    s1 = input("ENTER A STRING: ")
    s2 = input("ENTER ANOTHER STRING ")
    if s2 in s1:
        s1 = s1[:s1.find(s2)]+ s1[s1.find(s2)+len(s2):]
    print(s1)
remove()





#4.1
def alpha():
    for i in range(65, 91):
        print(chr(i), end = '')
    print()
    for i in range(97, 123):
        print(chr(i), end = '')
    print()
    i=65
    while i<91:
        print(chr(i), end= '')
        i = i+1
    print()
    i=97
    while i<123:
        print(chr(i), end= '')
        i = i+1
    
alpha()


#4.2
def print_multiplication_table(number):
    print(f"Multiplication Table of {number}:")
    for i in range(1, 11):
        print(f"{number} x {i} = {number * i}")

num = int(input("Enter a number to print its multiplication table: "))

print_multiplication_table(num)


#4.3
def count_alphabets_digits(text):
    alphabets = 0
    digits = 0
    for char in text:
        if char.isalpha():
            alphabets += 1
        elif char.isdigit():
            digits += 1
    return alphabets, digits

user_input = input("Enter a string: ")


#4.4
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_perfect(n):
    return sum(i for i in range(1, n) if n % i == 0) == n

def is_armstrong(n):
    digits = [int(d) for d in str(n)]
    return sum(d ** len(digits) for d in digits) == n

def is_palindrome(n):
    return str(n) == str(n)[::-1]

def is_automorphic(n):
    square = n * n
    return str(square).endswith(str(n))

num = int(input("Enter a number: "))

print(f"\nChecking number: {num}")
print("Prime:", "Yes" if is_prime(num) else "No")
print("Perfect:", "Yes" if is_perfect(num) else "No")
print("Armstrong:", "Yes" if is_armstrong(num) else "No")
print("Palindrome:", "Yes" if is_palindrome(num) else "No")
print("Automorphic:", "Yes" if is_automorphic(num) else "No")

alpha_count, digit_count = count_alphabets_digits(user_input)

print("Number of alphabets:", alpha_count)
print("Number of digits:", digit_count)


#4.5
def generate_pythagorean_triplets(limit):
    print(f"Pythagorean Triplets with side length ≤ {limit}:")
    for a in range(1, limit + 1):
        for b in range(a, limit + 1):  
            c = (a**2 + b**2)**0.5
            if c.is_integer() and c <= limit:
   
generate_pythagorean_triplets(30)


#4.6
def print_24_hour_labels():
    for hour in range(24):
        if hour == 0:
            label = "12 AM - Midnight"
        elif hour == 12:
            label = "12 PM - Noon"
        elif hour < 12:
            label = f"{hour} AM"
        else:
            label = f"{hour - 12} PM"
        print(label)

print_24_hour_labels()


#4.7
import math
def nCr(n, r):
    return math.comb(n, r)  

def nPr(n, r):
    return math.perm(n, r)  

n = int(input("Enter n: "))
r = int(input("Enter r: "))

print(f"\n{n}C{r} = {nCr(n, r)}")
print(f"{n}P{r} = {nPr(n, r)}")


#4.8
def factorial(n):
    if n < 0:
        return "Factorial not defined for negative numbers."
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

num = int(input("Enter a number: "))

print(f"Factorial of {num} is: {factorial(num)}")


#4.9
def print_reverse_natural_numbers(n):
    for i in range(n, 0, -1):
        print(i, end=" ")

num = int(input("Enter N: "))

print_reverse_natural_numbers(num)


#4.10
def fibonacci(n):
    fib_series = []
    a, b = 0, 1
    for _ in range(n):
        fib_series.append(a)
        a, b = b, a + b
    return fib_series

num = int(input("Enter the number of Fibonacci numbers to generate: "))

fib_sequence = fibonacci(num)
print(f"First {num} Fibonacci numbers: {fib_sequence}")


#4.11
import math
def sin_x(x, terms=10):
    result = 0
    for n in range(terms):
        # Taylor series term: (-1)^n * x^(2n+1) / (2n+1)!
        result += ((-1) ** n) * (x ** (2 * n + 1)) / math.factorial(2 * n + 1)
    return result

x = float(input("Enter the value of x (in radians): "))

result = sin_x(x)
print(f"sin({x}) = {result}")


Lab 5
#q1
"""import random
odd_list = [random.randint(1,100)*2 -1 for _ in range(5)]
print("list of 5 odd integers:", odd_list)
even_list = [random.randint(1,100)*2 for _ in range(4)]
print("list of 4 even integers:", even_list)
odd_list[2] = even_list
print("after replacing the third element:", odd_list)
flattened_list = []
for item in odd_list:
    if isinstance(item,list):
        flattened_list.extend(item)
    else:
        flattened_list.append(item)
print("flattened list:", flattened_list)
flattened_list.sort()
print("sorted flattened list:", flattened_list)"""
#q2
"""import random
random_list = [random.randint(1,10) for _ in range(20)]
print("generated list:",random_list)
num = int(input("enter a number to find its positions:"))
positions = []
for i in range(len(random_list)):
    if random_list [i] == num:
        positions.append(i)
print(f"positions of {num} in the list:{positions}")"""
#q3
"""import random
random_list = [random.randint(1,30) for _ in range (50)]
print("original list:", random_list)
i = 0
while i < len(random_list):
    if random_list.count(random_list[i]) >1:
        random_list.pop(i)
    else:
        i+=1
print("list after removing duplicates:", random_list)"""
#q4
"""import random
random_list = [random.randint(-50,50) for _ in range(30)]
print("generated list:", random_list)

positive_list = [num for num in random_list if num >0]
negative_list = [ num for num in random_list if num <0]
print("positive numbers:", positive_list)
print("negative numbers:", negative_list)"""
#q5
"""str_list = [ "apple", "banana", "cherry" , "dates", "elderberry"]
print("original list:", str_list)
uppercase_list = [s.upper() for s in str_list]
print("uppercase list:",uppercase_list)"""
#q6
"""fahrenheit_list = [32,98.6,212,77,104]
celsius_list = [ (f-32) *5/9 for f in fahrenheit_list]
print(" fahrenheit list:", fahrenheit_list)
print("celsius list:", celsius_list)"""
#q7
"""stack = []
while True:
    print("\n menu:")
    print("1. Push")
    print("2. pop")
    print("3. Display stack")
    print("4. exit")
    choice = int (input("enter you choice:"))

    if choice == 1:
        item = input("enter the item to push:")
        stack.append(item)
        print(f"{item} pushed to stack.")
    elif choice == 2:
        if stack:
            print(f" {stack.pop()} popped from stack.")
        else:
            print("stack is empty")
    elif choice == 3:
        print("stack:",stack)
    elif choice == 4:
        break
    else:
        print("invalid choice!")"""
#q8
"""queue = []
while True:
    print("\nMenu:")
    print("1. enqueue")
    print("2. dequeue")
    print("3. display queue")
    print("4. exit")
    choice = int(input("enter your choice:"))
    if choice == 1:
        item = input("enter the item to enqueue:")
        queue.append(item)
        print(f" {item} added to queue.")
    elif choice == 2:
        if queue:
            print(f" {queue.pop(0)} removed from queue.")
        else:
            print("queue is empty!")
    elif choice == 3:
        print("queue:", queue)
    elif choice == 4:
        break
    else:
        print("invalid choice!")"""
#q9
"""lst1 = [1,2,3,4,5,6]
lst2 = [5,6,7,8]
lst3 = [ num for num in lst1 if num not in lst2]
print("list 1:", lst1)
print("list 2:", lst2)
print("list 3:", lst3)

Lab6
#q1
"""def tuple1():
    l = [('b1','b2','b3'),'g1','g2']
    print(l)
    b=0
    g=0
    for x in l:
        print(x)
        if isinstance(x,tuple):
            b+=len(x)
        else:
            g +=1
    print("no. of boys:",b)
    print("no. of girls:",g)
tuple1()"""
#q2
"""students=[(1,"roy", 18),(2,"aliza",20),(3,"sophia",19),(4,"joseph",21)]
roll_number =[]
names = []
age =[]

for student in students:
    roll_number.append (student[0])
    names.append(student[1])
    age.append(student[2])

print("roll numbers of the students:",roll_number)
print("name of the students:",names)
print("age of the students:",age)"""
#q3
"""def q3():
    d1 = (12,7,25)
    d2 = (13,8,25)
    d = d2[0]-d1[0]
    m= (d2[1]-d1[1])*31
    y= (d2[2]- d1[2])*365
    no_of_days = d+ m+ y
    print(no_of_days)

q3()"""
#q3
"""import datetime
def tuple3():
    d1 =(18,2,2025)
    d2 = (18,2,2024)
    date1 = datetime.date(d1[2],d1[1],d1[0])
    date2 = datetime.date(d2[2],d2[1],d2[0])
    print(type(date1))
    print(abs(date1-date2))

tuple3()"""
#q4
"""def q4():
    t1= [("maggi",20), ("paneer chilli", 50), ("cold coffee",70), ("cake", 450)]
    for x in t1:
        print(t1)
    print(sorted(t1))
    import operator
    print(sorted(t1,key = operator.itemgetter(1)))

q4()"""

#q5
"""tuple_list=[(),(1,2),(),(3,4),("hello"),()]
filtered_list= [t for t in tuple_list if t]
print("list after removing the empty tuple:", filtered_list)"""

#q6
def q6():
    t1 =('a','b','c','d')
    a = list(t1)
    a[2] = 2
    b = tuple(a)
    print(a)
q6()
#q7
my_tuple = (1,2,3,4,5,6,7,8)
l = list(my_tuple)
l.pop(2)
print (l)
a = tuple(l)

Lab7
#7.1
d1 = {'a': 1}
d2 = {'b': 2}
d3 = {'c': 3}


d4 = {}
d4.update(d1)
d4.update(d2)
d4.update(d3)


print("Combined Dictionary:", d4)

#7.2
def empty_or_not(d):
    if not d:
        print("The dictionary is empty.")
    else:
        print("The dictionary is not empty.")

d1={}
d2={'a':18,'v':4}
empty_or_not(d1)
empty_or_not(d2)

#7.3
dept_salaries = {
    101: [50000, 60000, 55000],
    102: [45000, 47000],
    103: [70000, 72000, 68000]
}


for dept, salaries in dept_salaries.items():
    print(f"Department {dept}: \n Min Salary: {min(salaries)}, Max Salary: {max(salaries)}")

#7.4

text = input("Enter a string: ")


char_freq = {}

for char in text:
    if char in char_freq:
        char_freq[char] += 1
    else:
        char_freq[char] = 1

print("Character frequencies:", char_freq)

Lab8
#8.1
def set1():
    sentence = input("enter the sentence: ").split()
    print (sentence)
    s = set()
    s = {x.upper() for x in sentence}
    print(s)
set1()

#8.2
import random
def set2():
    s = set()
    while len(s) != 10:
        x = random.randint(15,45)
        s.add(x)
    print(s)
    d = set()
    c = 0
    for x in s:
        if x < 30:
            c += 1
        if x > 35:
            d.add(x)
    s = s - d
    print("No. of elements<30 ", c)
    print("After deleting all the values>35" , s)

set2()


#8.3
def set3():
    s = set()
    for i in range(5):
        s.add(input("Enter a name: "))
    print(s)
    nm = input("enter a name to modify: ")
    if nm in s:
        newnm = input("replace it with: ")
        s.pop(nm)
        s.add(newnm)
    else:
        print(nm,"not found")
    print(s.popitem(), " is deleted ")
    print(s.popitem(), " is deleted ")
    print("The final list: ", s)
    
set3()


#8.4
def set4():
    s = {'vidhi' , 'naiyya' , 'swaroopa' , 'vruti' , 'krissa'}
    sa = set()
    sb = set()
    for nm in s:
        if nm[0] == 'a':
            sa.add(nm)
        elif nm[0] == 'b':
            sb.add(nm)
    sa1 = {nm for nm in s if nm[0] == 'a'}
    print(sa)
    print(sb)#8.1
def set1():
    sentence = input("enter the sentence: ").split()
    print (sentence)
    s = set()
    s = {x.upper() for x in sentence}
    print(s)
set1()
Lab 9(a)
# 1. Define three functions and call them from a list
def fun():
    print("This is fun()")

def disp():
    print("This is disp()")

def msg():
    print("This is msg()")

functions = [fun, disp, msg]
for f in functions:
    f()

# 2. Add corresponding elements of two lists using map and lambda
list1 = [1, 2, 3, 4, 5, 6]
list2 = [6, 5, 4, 3, 2, 1]
result = list(map(lambda x, y: x + y, list1, list2))
print("Resultant list:", result)

# 3. Generate 10 random numbers between -15 and 15 and square them
import random
numbers = random.sample(range(-15, 16), 10)
squares = list(map(lambda x: x**2, numbers))
print("Random numbers:", numbers)
print("Squares:", squares)

# 4. Print strings that are palindromes
lst = ['madam', 'Python', "malayalam", 12321]
palindromes = list(filter(lambda x: isinstance(x, str) and x == x[::-1], lst))
print("Palindrome strings:", palindromes)

# 5. Filter names longer than 8 characters
faculty_names = ['Alexander', 'Bob', 'Catherine', 'John', 'Elizabeth', 'Mike', 'Christina']
long_names = list(filter(lambda name: len(name) > 8, faculty_names))
print("Names longer than 8 characters:", long_names)

Lab 9(b)
# 1. Count lowercase and uppercase characters
def count_lower_upper(s):
    result = {'lowercase': 0, 'uppercase': 0}
    for char in s:
        if char.islower():
            result['lowercase'] += 1
        elif char.isupper():
            result['uppercase'] += 1
    return result

print(count_lower_upper("Hello World! Functional Programming Rocks."))

# 2. Compute n + nn + nnn + nnnn
def compute(n):
    n = str(n)
    return int(n) + int(n*2) + int(n*3) + int(n*4)

for i in range(4, 8):
    print(f"compute({i}) =", compute(i))

# 3. Create and return a 3D array
def create_array(x, y, z, val):
    return [[[val for _ in range(z)] for _ in range(y)] for _ in range(x)]

array = create_array(3, 4, 5, 7)
print("3D array created with value 7 at all positions.")

# 4. Calculate sum and average of 5 marks
def sum_avg(marks):
    total = sum(marks)
    avg = total / len(marks)
    return total, avg

print("Sum and Avg:", sum_avg([80, 90, 85, 95, 100]))

# 5. Check if a string is a pangram
def ispangram(sentence):
    return set('abcdefghijklmnopqrstuvwxyz') <= set(sentence.lower())

print(ispangram("The quick brown fox jumps over the lazy dog"))
print(ispangram("Crazy Fredrick bought many very exquisite opal jewels"))

# 6. Create list of (x, x^2, x^3)
def power_tuples(n):
    return [(x, x**2, x**3) for x in range(1, n+1)]

print("Tuples:", power_tuples(5))

# 7. Check if string is a palindrome (ignoring case and spaces)
def ispalindrome(s):
    s_cleaned = ''.join(filter(str.isalnum, s)).lower()
    return s_cleaned == s_cleaned[::-1]

print(ispalindrome("A man a plan a canal Panama"))
print(ispalindrome("Hello"))

# 8. Remove duplicates and sort words in a string
def convert(s):
    words = s.split()
    unique_sorted = sorted(set(words))
    return ' '.join(unique_sorted)

print(convert("hello world hello python world code"))

# 9. Count alphabets and digits in a string
def count_alpha_digits(s):
    result = {'alphabets': 0, 'digits': 0}
    for char in s:
        if char.isalpha():
            result['alphabets'] += 1
        elif char.isdigit():
            result['digits'] += 1
    return result

print(count_alpha_digits("abc123ABC456xyz"))

# 10. Frequency of words in a string (sorted by word)
def frequency(text):
    words = text.split()
    freq = {}
    for word in words:
        freq[word] = freq.get(word, 0) + 1
    return dict(sorted(freq.items()))

print(frequency("apple banana apple orange banana apple"))

# 11. Intersection of two lists
def create_list(list1, list2):
    return list(set(list1) & set(list2))

print(create_list([1, 2, 3,_

Lab 9(b-2)
# 1. Recursive function to obtain prime factors
def prime_factors(n, i=2):
    if n < 2:
        return []
    if n % i == 0:
        return [i] + prime_factors(n // i, i)
    return prime_factors(n, i + 1)

print("Prime factors of 84:", prime_factors(84))

# 2. Function to find binary equivalent of a number
def to_binary(n):
    if n == 0:
        return '0'
    if n == 1:
        return '1'
    return to_binary(n // 2) + str(n % 2)

print("Binary of 18:", to_binary(18))

# 3. Recursive function to count vowels in a string
def count_vowels(s):
    if not s:
        return 0
    return (1 if s[0].lower() in 'aeiou' else 0) + count_vowels(s[1:])

print("Vowel count:", count_vowels("Functional Programming Rocks"))

# 4. Recursive function to reverse a list
def reverse_list(lst):
    if len(lst) <= 1:
        return lst
    return [lst[-1]] + reverse_list(lst[:-1])

print("Reversed list:", reverse_list([1, 2, 3, 4, 5]))

# 5. Recursive function to calculate a^b
def power(a, b):
    if b == 0:
        return 1
    return a * power(a, b - 1)

print("3^4 =", power(3, 4))

# 6. Recursive function to replace negative values with 0
def sanitize_list(lst):
    if not lst:
        return []
    head = 0 if lst[0] < 0 else lst[0]
    return [head] + sanitize_list(lst[1:])

print("Sanitized list:", sanitize_list([-1, 5, -3, 7, 0, -2]))

# 7. Recursive function to get average of list
def average_list(lst):
    def helper(lst, total=0, count=0):
        if not lst:
            return total / count if count > 0 else 0
        return helper(lst[1:], total + lst[0], count + 1)
    return helper(lst)

print("Average:", average_list([10, 20, 30, 40, 50]))

# 8. Recursive function to find length of a string
def string_length(s):
    if s == '':
        return 0
    return 1 + string_length(s[1:])

print("Length of string:", string_length("Recursion"))

Lab 10

#q1
"""import csv
data = [
    ["Name", "Age", "City"],
    ["Alia", 25, "Bhopal"],
    ["Navya", 19, "New Delhi"],
    ["vidhi", 31, "Chennai"],
    ["Soumya", 40, "Bengaluru"]
]

filename = "people.csv"
with open(filename, mode='w', newline='') as file:
    writer = csv.writer(file)
    
    writer.writerows(data)

print(f"CSV file '{filename}' has been created successfully!")"""
#q1

"""f = open("C:\\Users\\lab\\Downloads\\people.csv","w")
f.write ("Alia,")
f.write ("Sharma")
f.write ("1234567789")

f.close()"""

#q2
"""f = open("C:\\Users\\lab\\Downloads\\people.csv","w")
f.write("roll no, name, maths,physics,chemistry")
rlno = input("enter your roll no. [press enter to quit]")
while rlno:
    nm = input("enter your name:")
    c,m,p = input("enter the marks of maths,physics, chemistry").split(" " )
    f.write(rlno + "," +nm+","+c+","+m+","+p+"\n")
    rlno = input("enter your roll no. [press enter to quit]")
f.close()"""
#q3
"""f = open("C:\\Users\\lab\\Downloads\\people.csv","a")
f.write("roll no, name, maths,physics,chemistry")
rlno = input("enter your roll no. [press enter to quit]")
while rlno:
    nm = input("enter your name:")
    c,m,p = input("enter the marks of maths,physics, chemistry").split(" " )
    f.write(rlno + "," +nm+","+c+","+m+","+p+"\n")
    rlno = input("enter your roll no. [press enter to quit]")
f.close()"""
#q4
"""import os    # Helps us work with folders
import shutil  # Helps us copy files

# Step 1: Set the path of the file you want to copy
source_file = "Users\sriva\Downloads\APPLICATIONS_OF_SECOND-ORDER_DIFFERENTIA (1).pdf"  # This is where the file is now

# Step 2: Set the name of the folder you want to create
new_folder = 'new'  # This is the new folder

# Step 3: Check if the new folder already exists
if not os.path.exists(new_folder):
    os.mkdir(new_folder)  # Create the folder if it doesn't exist
    print("New folder created:", new_folder)
else:
    print("Folder already exists:", new_folder)

# Step 4: Copy the file into the new folder
# We need to build the full path to where the file will go
destination_file = new_folder + "Users\sriva\Downloads\APPLICATIONS_OF_SECOND-ORDER_DIFFERENTIA (1).pdf"

try:
    shutil.copy(source_file, destination_file)
    print("File copied successfully!")
except FileNotFoundError:
    print("The file you're trying to copy does not exist.")
except Exception as error:
    print("Something went wrong:", error)"""
#q5
"""# Step 1: Open the source file for reading
try:
    with open('source.txt', 'r') as source_file:
        # Step 2: Read the contents of the file
        content = source_file.read()

        # Step 3: Convert all lowercase letters to uppercase
        content_upper = content.upper()

        # Step 4: Open the destination file for writing
        with open('destination.txt', 'w') as destination_file:
            destination_file.write(content_upper)

        print("File copied successfully with lowercase letters changed to uppercase.")

except FileNotFoundError:
    print("Error: 'source.txt' not found.")
except Exception as e:
    print("An error occurred:", e)"""
#q6
"""# Open both source files for reading
try:
    with open('file1.txt', 'r') as f1, open('file2.txt', 'r') as f2:
        # Read all lines from both files
        lines1 = f1.readlines()
        lines2 = f2.readlines()

    # Create a new file to write the merged lines
    with open('merged.txt', 'w') as output:
        # Get the length of the longer file
        max_len = max(len(lines1), len(lines2))

        # Loop through each line index
        for i in range(max_len):
            if i < len(lines1):
                output.write(lines1[i].rstrip() + '\n')
            if i < len(lines2):
                output.write(lines2[i].rstrip() + '\n')

    print("Files merged successfully into 'merged.txt'.")

except FileNotFoundError as e:
    print("Error: One of the input files was not found.")
    print(e)
except Exception as e:
    print("An error occurred:", e)"""
#q7
"""# Step 1: Create the Employee class
class Employee:
    def __init__(self, empcode, empname, date_of_joining, salary):
        self.empcode = empcode
        self.empname = empname
        self.date_of_joining = date_of_joining
        self.salary = salary

    def display(self):
        print("Employee Code:", self.empcode)
        print("Employee Name:", self.empname)
        print("Date of Joining:", self.date_of_joining)
        print("Salary:", self.salary)

# Step 2: Create an employee object
emp = Employee(101, "Alice", "2022-03-15", 55000)

# Step 3: Save employee data to a text file (Serialization)
with open("employee.txt", "w") as file:
    file.write(str(emp.empcode) + "\n")
    file.write(emp.empname + "\n")
    file.write(emp.date_of_joining + "\n")
    file.write(str(emp.salary) + "\n")
    print("Employee data saved to 'employee.txt'.")

# Step 4: Read employee data from the text file (Deserialization)
with open("employee.txt", "r") as file:
    code = int(file.readline().strip())
    name = file.readline().strip()
    joining_date = file.readline().strip()
    salary = float(file.readline().strip())

# Step 5: Create a new Employee object from the read data
new_emp = Employee(code, name, joining_date, salary)

print("\nEmployee data read from file:")
new_emp.display()"""
#q8
"""# List of words to remove
remove_words = ['a', 'an', 'the']

# Step 1: Open the original file to read
with open('source.txt', 'r') as infile:
    content = infile.read()

# Step 2: Replace the words with blank spaces
words = content.split()  # Split text into a list of words
filtered_words = [word for word in words if word.lower() not in remove_words]  # Remove 'a', 'an', 'the'

# Step 3: Join the words back into a single string
cleaned_text = ' '.join(filtered_words)

# Step 4: Write the cleaned text to a new file
with open('destination.txt', 'w') as outfile:
    outfile.write(cleaned_text)

print("File processed successfully! Cleaned content saved in 'destination.txt'.")"""

Lab 11 and lab 12
# 11.1
while True:
    try:
        num = int(input("Enter an integer: "))
        print("You entered:", num)
        break
    except ValueError:
        print("That's not an integer. Please try again.")

# 12.1
class Complex:
    def __init__(self, real, imag):
        self.real = real
        self.imag = imag

    def add(self, other):
        return Complex(self.real + other.real, self.imag + other.imag)

    def subtract(self, other):
        return Complex(self.real - other.real, self.imag - other.imag)

    def multiply(self, other):
        r = self.real * other.real - self.imag * other.imag
        i = self.real * other.imag + self.imag * other.real
        return Complex(r, i)

    def divide(self, other):
        den = other.real**2 + other.imag**2
        r = (self.real * other.real + self.imag * other.imag) / den
        i = (self.imag * other.real - self.real * other.imag) / den
        return Complex(r, i)

    def display(self):
        print(f"{self.real} + {self.imag}i")

c1 = Complex(4, 3)
c2 = Complex(1, 2)
c1.add(c2).display()
c1.subtract(c2).display()
c1.multiply(c2).display()
c1.divide(c2).display()

# 12.2
class Matrix:
    def __init__(self, mat):
        self.mat = mat

    def add(self, other):
        result = [[self.mat[i][j] + other.mat[i][j] for j in range(3)] for i in range(3)]
        return Matrix(result)

    def multiply(self, other):
        result = [[0]*3 for _ in range(3)]
        for i in range(3):
            for j in range(3):
                for k in range(3):
                    result[i][j] += self.mat[i][k] * other.mat[k][j]
        return Matrix(result)

    def transpose(self):
        result = [[self.mat[j][i] for j in range(3)] for i in range(3)]
        return Matrix(result)

    def show(self):
        for row in self.mat:
            print(row)

m1 = Matrix([[1,2,3],[4,5,6],[7,8,9]])
m2 = Matrix([[9,8,7],[6,5,4],[3,2,1]])
m1.add(m2).show()
m1.multiply(m2).show()
m1.transpose().show()

# 12.3
class Solid:
    def __init__(self, shape, values):
        self.shape = shape
        self.values = values

    def surface_area(self):
        if self.shape == "sphere":
            r = self.values
            return 4 * 3.14 * r * r
        elif self.shape == "cuboid":
            l, w, h = self.values
            return 2 * (l*w + w*h + h*l)

    def volume(self):
        if self.shape == "sphere":
            r = self.values
            return (4/3) * 3.14 * r**3
        elif self.shape == "cuboid":
            l, w, h = self.values
            return l * w * h

s = Solid("sphere", 3)
print("Surface Area:", s.surface_area())
print("Volume:", s.volume())

# 12.4
class Shape:
    def __init__(self, shape, size):
        self.shape = shape
        self.size = size

    def area(self):
        if self.shape == "circle":
            return 3.14 * self.size * self.size
        elif self.shape == "square":
            return self.size * self.size

    def perimeter(self):
        if self.shape == "circle":
            return 2 * 3.14 * self.size
        elif self.shape == "square":
            return 4 * self.size

s = Shape("circle", 5)
print("Area:", s.area())
print("Perimeter:", s.perimeter())

# 12.5
class Time:
    def __init__(self, h, m, s):
        self.h = h
        self.m = m
        self.s = s

    def add(self, other):
        s = self.s + other.s
        m = self.m + other.m + s // 60
        h = self.h + other.h + m // 60
        return Time(h % 24, m % 60, s % 60)

    def show(self):
        print(f"{self.h:02d}:{self.m:02d}:{self.s:02d}")

t1 = Time(2, 30, 45)
t2 = Time(1, 40, 30)
t1.add(t2).show()

# 12.6
class Date:
    def __init__(self, d, m, y):
        self.day = d
        self.month = m
        self.year = y

    def __eq__(self, other):
        return self.day == other.day and self.month == other.month and self.year == other.year

d1 = Date(22, 4, 2025)
d2 = Date(22, 4, 2025)
print("Dates are equal:", d1 == d2)

# 12.7
class Weather:
    def __init__(self, items):
        self.items = items

    def __contains__(self, item):
        return item in self.items

w = Weather(["Rain", "Cloudy", "Windy"])
print("Rain" in w)
print("Sunny" in w)

# 12.8
class MyString:
    def __init__(self, text):
        self.text = text

    def __iadd__(self, other):
        self.text += other.text
        return self

    def toLower(self):
        return self.text.lower()

    def toUpper(self):
        return self.text.upper()

s1 = MyString("Hello")
s2 = MyString("World")
s1 += s2
print("Joined:", s1.text)
print("Lower:", s1.toLower())
print("Upper:", s1.toUpper())
